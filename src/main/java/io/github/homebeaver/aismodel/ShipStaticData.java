/*
 * Ais-Stream WebsocketObjects
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.homebeaver.aismodel;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import dk.dma.ais.message.NavigationalStatus;
import dk.dma.ais.message.ShipTypeCargo;
import dk.dma.ais.message.ShipTypeColor;
import io.swagger.annotations.ApiModelProperty;

//import org.openapitools.client.JSON;

/**
 * ShipStaticData
 * Message 5: Ship static and voyage related data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-27T20:57:25.293422-07:00[America/Vancouver]")
public class ShipStaticData {
  public static final String SERIALIZED_NAME_MESSAGE_I_D = "MessageID";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_D)
  // AisMessage5
  private Integer messageID;

  public static final String SERIALIZED_NAME_REPEAT_INDICATOR = "RepeatIndicator";
  @SerializedName(SERIALIZED_NAME_REPEAT_INDICATOR)
  private Integer repeatIndicator;

  // aka MMSI
  public static final String SERIALIZED_NAME_USER_I_D = "UserID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private Integer userID;

  public static final String SERIALIZED_NAME_VALID = "Valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  /**
   * AIS version indicator: 
   * 0 = station compliant with Recommendation ITU-R M.1371-1 
   * 1 = station compliant with Recommendation ITU-R M.1371-3 
   * 2-3 = station compliant with future editions
   */
//  int version; // 2 bits
  public static final String SERIALIZED_NAME_AIS_VERSION = "AisVersion";
  @SerializedName(SERIALIZED_NAME_AIS_VERSION)
  private Integer aisVersion;

  /**
   * IMO number: 1-999999999; 0 = not available = default � Not applicable to SAR aircraft
   */
//  long imo; // 30 bits
  public static final String SERIALIZED_NAME_IMO_NUMBER = "ImoNumber";
  @SerializedName(SERIALIZED_NAME_IMO_NUMBER)
  private Integer imoNumber;

  /**
   * Call sign: 7 = 6 bit ASCII characters, @@@@@@@ = not available = default
   */
//  protected String callsign; // 7x6 (42) bits
//  from AisStaticCommon
  public static final String SERIALIZED_NAME_CALL_SIGN = "CallSign";
  @SerializedName(SERIALIZED_NAME_CALL_SIGN)
  private String callSign;

  /**
   * Ship name: Maximum 20 characters 6 bit ASCII, as defined in Table 44
   *
   * {@literal @@@@@@@@@@@@@@@@@@@@ } = not available = default. 
   * For SAR aircraft, it should be set to "SAR AIRCRAFT NNNNNNN" where NNNNNNN equals the aircraft registration number
   */
//  protected String name; // 20x6 (120) bits
//  from AisStaticCommon
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Type of ship and cargo type: 
   * 0 = not available or no ship = default 
   * 1-99 = as defined in � 3.3.2 
   * 100-199 = reserved, for regional use 
   * 200-255 = reserved, for future use 
   * Not applicable to SAR aircraft
   */
//  protected int shipType; // 8 bits
//  from AisStaticCommon
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
/*
Type Code 	Description
0 	Not available (default)
1-19 	Reserved for future use
20 	Wing in ground (WIG), all ships of this type
21 	Wing in ground (WIG), Hazardous category A
22 	Wing in ground (WIG), Hazardous category B
23 	Wing in ground (WIG), Hazardous category C
24 	Wing in ground (WIG), Hazardous category D
25 	Wing in ground (WIG), Reserved for future use
26 	Wing in ground (WIG), Reserved for future use
27 	Wing in ground (WIG), Reserved for future use
28 	Wing in ground (WIG), Reserved for future use
29 	Wing in ground (WIG), Reserved for future use
30 	Fishing
31 	Towing
32 	Towing: length exceeds 200m or breadth exceeds 25m
33 	Dredging or underwater ops
34 	Diving ops
35 	Military ops
36 	Sailing
37 	Pleasure Craft
38 	Reserved
39 	Reserved
40 	High speed craft (HSC), all ships of this type
41 	High speed craft (HSC), Hazardous category A
42 	High speed craft (HSC), Hazardous category B
43 	High speed craft (HSC), Hazardous category C
44 	High speed craft (HSC), Hazardous category D
45 	High speed craft (HSC), Reserved for future use
46 	High speed craft (HSC), Reserved for future use
47 	High speed craft (HSC), Reserved for future use
48 	High speed craft (HSC), Reserved for future use
49 	High speed craft (HSC), No additional information
50 	Pilot Vessel
51 	Search and Rescue vessel
52 	Tug
53 	Port Tender
54 	Anti-pollution equipment
55 	Law Enforcement
56 	Spare - Local Vessel
57 	Spare - Local Vessel
58 	Medical Transport
59 	Noncombatant ship according to RR Resolution No. 18
60 	Passenger, all ships of this type
61 	Passenger, Hazardous category A
62 	Passenger, Hazardous category B
63 	Passenger, Hazardous category C
64 	Passenger, Hazardous category D
65 	Passenger, Reserved for future use
66 	Passenger, Reserved for future use
67 	Passenger, Reserved for future use
68 	Passenger, Reserved for future use
69 	Passenger, No additional information
70 	Cargo, all ships of this type
71 	Cargo, Hazardous category A
72 	Cargo, Hazardous category B
73 	Cargo, Hazardous category C
74 	Cargo, Hazardous category D
75 	Cargo, Reserved for future use
76 	Cargo, Reserved for future use
77 	Cargo, Reserved for future use
78 	Cargo, Reserved for future use
79 	Cargo, No additional information
80 	Tanker, all ships of this type
81 	Tanker, Hazardous category A
82 	Tanker, Hazardous category B
83 	Tanker, Hazardous category C
84 	Tanker, Hazardous category D
85 	Tanker, Reserved for future use
86 	Tanker, Reserved for future use
87 	Tanker, Reserved for future use
88 	Tanker, Reserved for future use
89 	Tanker, No additional information
90 	Other Type, all ships of this type
91 	Other Type, Hazardous category A
92 	Other Type, Hazardous category B
93 	Other Type, Hazardous category C
94 	Other Type, Hazardous category D
95 	Other Type, Reserved for future use
96 	Other Type, Reserved for future use
97 	Other Type, Reserved for future use
98 	Other Type, Reserved for future use
99 	Other Type, no additional information
 */
  private Integer type;

  public static final String SERIALIZED_NAME_DIMENSION = "Dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private ShipStaticDataDimension dimension;

  /**
   * Type of electronic position fixing device (EPFS): 
   * 0 = undefined (default) 
   * 1 = GPS 
   * 2 = GLONASS 
   * 3 = combined GPS/GLONASS 
   * 4 = Loran-C 
   * 5 = Chayka 
   * 6 = integrated navigation system 
   * 7 = surveyed 
   * 8 = Galileo, 
   * 9-14 = not used 
   * 15 = internal GNSS
   */
//  int posType; // 4 bits
  public static final String SERIALIZED_NAME_FIX_TYPE = "FixType";
  @SerializedName(SERIALIZED_NAME_FIX_TYPE)
  private Integer fixType;

  /**
   * ETA: Estimated time of arrival; MMDDHHMM UTC Bits 19-16: month; 1-12; 0 = not available = default Bits 15-11:
   * day; 1-31; 0 = not available = default Bits 10-6: hour; 0-23; 24 = not available = default Bits 5-0: minute;
   * 0-59; 60 = not available = default For SAR aircraft, the use of this field may be decided by the responsible
   * administration
   */
//  long eta; // 20 bits
  public static final String SERIALIZED_NAME_ETA = "Eta";
  @SerializedName(SERIALIZED_NAME_ETA)
  private ShipStaticDataEta eta;

  /**
   * Maximum present static draught: In 1/10 m, 255 = draught 25.5 m or greater, 0 = not available = default in
   * accordance with IMO Resolution A.851 Not applicable to SAR aircraft, should be set to 0
   */
//  int draught; // 8 bits
  public static final String SERIALIZED_NAME_MAXIMUM_STATIC_DRAUGHT = "MaximumStaticDraught";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_STATIC_DRAUGHT)
  private Double maximumStaticDraught;

  /**
   * Ship Destination: Maximum 20 characters using 6-bit ASCII;
   *
   * {@code @@@@@@@@@@@@@@@@@@@@} = not available For SAR aircraft, the use of this field may be decided by the responsible                      administration
   */
//  String dest; // 6x20 (120) bits
  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  /**
   * DTE: Data terminal equipment (DTE) ready 0 = available 1 = not available = default see � 3.3.1
   */
//  int dte; // 1 bit : DTE flag
  public static final String SERIALIZED_NAME_DTE = "Dte";
  @SerializedName(SERIALIZED_NAME_DTE)
  private Boolean dte;

  /**
   * Spare. Not used. Should be set to zero. Reserved for future use
   */
//  int spare; // 1 bit : spare
  public static final String SERIALIZED_NAME_SPARE = "Spare";
  @SerializedName(SERIALIZED_NAME_SPARE)
  private Boolean spare;

  public ShipStaticData() { 
  }

  public ShipStaticData messageID(Integer messageID) {
    
    this.messageID = messageID;
    return this;
  }

   /**
   * Get messageID
   * @return messageID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMessageID() {
    return messageID;
  }


  public void setMessageID(Integer messageID) {
    this.messageID = messageID;
  }


  public ShipStaticData repeatIndicator(Integer repeatIndicator) {
    
    this.repeatIndicator = repeatIndicator;
    return this;
  }

   /**
   * Get repeatIndicator
   * @return repeatIndicator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRepeatIndicator() {
    return repeatIndicator;
  }


  public void setRepeatIndicator(Integer repeatIndicator) {
    this.repeatIndicator = repeatIndicator;
  }


  public ShipStaticData userID(Integer userID) {
    
    this.userID = userID;
    return this;
  }

   /**
   * Get userID
   * @return userID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getUserID() {
    return userID;
  }


  public void setUserID(Integer userID) {
    this.userID = userID;
  }


  public ShipStaticData valid(Boolean valid) {
    
    this.valid = valid;
    return this;
  }

   /**
   * Get valid
   * @return valid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getValid() {
    return valid;
  }


  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  public ShipStaticData aisVersion(Integer aisVersion) {
    
    this.aisVersion = aisVersion;
    return this;
  }

   /**
   * Get aisVersion
   * @return aisVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAisVersion() {
    return aisVersion;
  }


  public void setAisVersion(Integer aisVersion) {
    this.aisVersion = aisVersion;
  }


  public ShipStaticData imoNumber(Integer imoNumber) {
    
    this.imoNumber = imoNumber;
    return this;
  }

   /**
   * Get imoNumber
   * @return imoNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getImoNumber() {
    return imoNumber;
  }


  public void setImoNumber(Integer imoNumber) {
    this.imoNumber = imoNumber;
  }


  public ShipStaticData callSign(String callSign) {
    
    this.callSign = callSign;
    return this;
  }

   /**
   * Get callSign
   * @return callSign
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCallSign() {
    return callSign;
  }


  public void setCallSign(String callSign) {
    this.callSign = callSign;
  }


  public ShipStaticData name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ShipStaticData type(Integer type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getType() {
    return type;
  }


  public void setType(Integer type) {
    this.type = type;
  }


  public ShipStaticData dimension(ShipStaticDataDimension dimension) {
    
    this.dimension = dimension;
    return this;
  }

   /**
   * Get dimension
   * @return dimension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ShipStaticDataDimension getDimension() {
    return dimension;
  }


  public void setDimension(ShipStaticDataDimension dimension) {
    this.dimension = dimension;
  }


  public ShipStaticData fixType(Integer fixType) {
    
    this.fixType = fixType;
    return this;
  }

   /**
   * Get fixType
   * @return fixType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFixType() {
    return fixType;
  }


  public void setFixType(Integer fixType) {
    this.fixType = fixType;
  }


  public ShipStaticData eta(ShipStaticDataEta eta) {
    
    this.eta = eta;
    return this;
  }

   /**
   * Get eta
   * @return eta
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ShipStaticDataEta getEta() {
    return eta;
  }


  public void setEta(ShipStaticDataEta eta) {
    this.eta = eta;
  }


  public ShipStaticData maximumStaticDraught(Double maximumStaticDraught) {
    
    this.maximumStaticDraught = maximumStaticDraught;
    return this;
  }

   /**
   * Get maximumStaticDraught
   * @return maximumStaticDraught
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getMaximumStaticDraught() {
    return maximumStaticDraught;
  }


  public void setMaximumStaticDraught(Double maximumStaticDraught) {
    this.maximumStaticDraught = maximumStaticDraught;
  }


  public ShipStaticData destination(String destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDestination() {
    return destination;
  }


  public void setDestination(String destination) {
    this.destination = destination;
  }


  public ShipStaticData dte(Boolean dte) {
    
    this.dte = dte;
    return this;
  }

   /**
   * Get dte
   * @return dte
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getDte() {
    return dte;
  }


  public void setDte(Boolean dte) {
    this.dte = dte;
  }


  public ShipStaticData spare(Boolean spare) {
    
    this.spare = spare;
    return this;
  }

   /**
   * Get spare
   * @return spare
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSpare() {
    return spare;
  }


  public void setSpare(Boolean spare) {
    this.spare = spare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipStaticData shipStaticData = (ShipStaticData) o;
    return Objects.equals(this.messageID, shipStaticData.messageID) &&
        Objects.equals(this.repeatIndicator, shipStaticData.repeatIndicator) &&
        Objects.equals(this.userID, shipStaticData.userID) &&
        Objects.equals(this.valid, shipStaticData.valid) &&
        Objects.equals(this.aisVersion, shipStaticData.aisVersion) &&
        Objects.equals(this.imoNumber, shipStaticData.imoNumber) &&
        Objects.equals(this.callSign, shipStaticData.callSign) &&
        Objects.equals(this.name, shipStaticData.name) &&
        Objects.equals(this.type, shipStaticData.type) &&
        Objects.equals(this.dimension, shipStaticData.dimension) &&
        Objects.equals(this.fixType, shipStaticData.fixType) &&
        Objects.equals(this.eta, shipStaticData.eta) &&
        Objects.equals(this.maximumStaticDraught, shipStaticData.maximumStaticDraught) &&
        Objects.equals(this.destination, shipStaticData.destination) &&
        Objects.equals(this.dte, shipStaticData.dte) &&
        Objects.equals(this.spare, shipStaticData.spare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageID, repeatIndicator, userID, valid, aisVersion, imoNumber, callSign, name, type, dimension, fixType, eta, maximumStaticDraught, destination, dte, spare);
  }

  // \" hinzu, damit trailing blanks sichtbar sind, type + ShipTypeCargo
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    ShipTypeCargo stc = new ShipTypeCargo(getType());
    ShipTypeColor color = ShipTypeColor.getColor(stc.getShipType());
    sb.append("class ShipStaticData {\n");
    sb.append("    messageID: ").append(toIndentedString(messageID)).append("\n");
    sb.append("    repeatIndicator: ").append(toIndentedString(repeatIndicator)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    aisVersion: ").append(toIndentedString(aisVersion)).append("\n");
    sb.append("    imoNumber: ").append(toIndentedString(imoNumber)).append("\n");
    sb.append("    callSign: \"").append(toIndentedString(callSign)).append("\"\n");
    sb.append("    name: \"").append(toIndentedString(name)).append("\"\n");
    sb.append("    type: ").append(toIndentedString(type)).append("-").append(toIndentedString(stc)).append("-").append(toIndentedString(color)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    fixType: ").append(toIndentedString(fixType)).append("\n");
    sb.append("    eta: ").append(toIndentedString(eta)).append("\n");
    sb.append("    maximumStaticDraught: ").append(toIndentedString(maximumStaticDraught)).append("\n");
    sb.append("    destination: \"").append(toIndentedString(destination)).append("\"\n");
    sb.append("    dte: ").append(toIndentedString(dte)).append("\n");
    sb.append("    spare: ").append(toIndentedString(spare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MessageID");
    openapiFields.add("RepeatIndicator");
    openapiFields.add("UserID");
    openapiFields.add("Valid");
    openapiFields.add("AisVersion");
    openapiFields.add("ImoNumber");
    openapiFields.add("CallSign");
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("Dimension");
    openapiFields.add("FixType");
    openapiFields.add("Eta");
    openapiFields.add("MaximumStaticDraught");
    openapiFields.add("Destination");
    openapiFields.add("Dte");
    openapiFields.add("Spare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MessageID");
    openapiRequiredFields.add("RepeatIndicator");
    openapiRequiredFields.add("UserID");
    openapiRequiredFields.add("Valid");
    openapiRequiredFields.add("AisVersion");
    openapiRequiredFields.add("ImoNumber");
    openapiRequiredFields.add("CallSign");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("Dimension");
    openapiRequiredFields.add("FixType");
    openapiRequiredFields.add("Eta");
    openapiRequiredFields.add("MaximumStaticDraught");
    openapiRequiredFields.add("Destination");
    openapiRequiredFields.add("Dte");
    openapiRequiredFields.add("Spare");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipStaticData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ShipStaticData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipStaticData is not found in the empty JSON string", ShipStaticData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShipStaticData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipStaticData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShipStaticData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("CallSign") != null && !jsonObj.get("CallSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallSign").toString()));
      }
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Dimension`
      if (jsonObj.getAsJsonObject("Dimension") != null) {
        ShipStaticDataDimension.validateJsonObject(jsonObj.getAsJsonObject("Dimension"));
      }
      // validate the optional field `Eta`
      if (jsonObj.getAsJsonObject("Eta") != null) {
        ShipStaticDataEta.validateJsonObject(jsonObj.getAsJsonObject("Eta"));
      }
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Destination").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipStaticData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipStaticData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipStaticData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipStaticData.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipStaticData>() {
           @Override
           public void write(JsonWriter out, ShipStaticData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipStaticData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

public static ShipStaticData fromJson(JSONObject jo) {
    ShipStaticData res = new ShipStaticData();
    // Extract individual fields from JSONObject
    try {
//        public ShipStaticData messageID(Integer messageID) {
        //int mid = shipStaticData.getInt(SERIALIZED_NAME_MESSAGE_I_D);
        res = res.messageID(jo.getInt(SERIALIZED_NAME_MESSAGE_I_D));
        res = res.repeatIndicator(jo.getInt(SERIALIZED_NAME_REPEAT_INDICATOR));
        res = res.userID(jo.getInt(SERIALIZED_NAME_USER_I_D));
        res = res.valid(jo.getBoolean(SERIALIZED_NAME_VALID));
        res = res.aisVersion(jo.getInt(SERIALIZED_NAME_AIS_VERSION));
        res = res.imoNumber(jo.getInt(SERIALIZED_NAME_IMO_NUMBER));
        res = res.callSign(jo.getString(SERIALIZED_NAME_CALL_SIGN));
        res = res.name(jo.getString(SERIALIZED_NAME_NAME));
        res = res.type(jo.getInt(SERIALIZED_NAME_TYPE));
        // DONE dimensions
        JSONObject dimensions = jo.getJSONObject(SERIALIZED_NAME_DIMENSION);
        res = res.dimension(ShipStaticDataDimension.fromJson(dimensions));

        res = res.fixType(jo.getInt(SERIALIZED_NAME_FIX_TYPE));

        // TODO eta
        JSONObject etas = jo.getJSONObject(SERIALIZED_NAME_ETA);
        res = res.eta(ShipStaticDataEta.fromJson(etas));

        res = res.maximumStaticDraught(jo.getDouble(SERIALIZED_NAME_MAXIMUM_STATIC_DRAUGHT));
        res = res.destination(jo.getString(SERIALIZED_NAME_DESTINATION));
        res = res.dte(jo.getBoolean(SERIALIZED_NAME_DTE));
        // XXX spare
        System.out.println(res);
    } catch (JSONException e) {
//    	logger.error("Error creating ShipStaticData", e);
    }
    return res;
}

 /**
  * Create an instance of ShipStaticData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipStaticData
  * @throws IOException if the JSON string is invalid with respect to ShipStaticData
  */
//  public static ShipStaticData fromJson(String jsonString) throws IOException {
//    return JSON.getGson().fromJson(jsonString, ShipStaticData.class);
//  }

 /**
  * Convert an instance of ShipStaticData to an JSON string
  *
  * @return JSON string
  */
//  public String toJson() {
//    return JSON.getGson().toJson(this);
//  }
}

