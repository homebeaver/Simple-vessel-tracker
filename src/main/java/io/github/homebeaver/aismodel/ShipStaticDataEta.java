/*
 * Ais-Stream WebsocketObjects
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.homebeaver.aismodel;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Set;

//import org.openapitools.client.JSON;

/**
 * ShipStaticDataEta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-27T20:57:25.293422-07:00[America/Vancouver]")
public class ShipStaticDataEta {
  public static final String SERIALIZED_NAME_MONTH = "Month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private Integer month;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private Integer day;

  public static final String SERIALIZED_NAME_HOUR = "Hour";
  @SerializedName(SERIALIZED_NAME_HOUR)
  private Integer hour;

  public static final String SERIALIZED_NAME_MINUTE = "Minute";
  @SerializedName(SERIALIZED_NAME_MINUTE)
  private Integer minute;

  public ShipStaticDataEta() { 
  }

  public ShipStaticDataEta month(Integer month) {
    
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMonth() {
    return month;
  }


  public void setMonth(Integer month) {
    this.month = month;
  }


  public ShipStaticDataEta day(Integer day) {
    
    this.day = day;
    return this;
  }

   /**
   * Get day
   * @return day
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDay() {
    return day;
  }


  public void setDay(Integer day) {
    this.day = day;
  }


  public ShipStaticDataEta hour(Integer hour) {
    
    this.hour = hour;
    return this;
  }

   /**
   * Get hour
   * @return hour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getHour() {
    return hour;
  }


  public void setHour(Integer hour) {
    this.hour = hour;
  }


  public ShipStaticDataEta minute(Integer minute) {
    
    this.minute = minute;
    return this;
  }

   /**
   * Get minute
   * @return minute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMinute() {
    return minute;
  }


  public void setMinute(Integer minute) {
    this.minute = minute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipStaticDataEta shipStaticDataEta = (ShipStaticDataEta) o;
    return Objects.equals(this.month, shipStaticDataEta.month) &&
        Objects.equals(this.day, shipStaticDataEta.day) &&
        Objects.equals(this.hour, shipStaticDataEta.hour) &&
        Objects.equals(this.minute, shipStaticDataEta.minute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(month, day, hour, minute);
  }

  // "\n" durch nix ersetzt
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipStaticDataEta {");
    sb.append("month: ").append(toIndentedString(month));
    sb.append(", day: ").append(toIndentedString(day));
    sb.append(", hour: ").append(toIndentedString(hour));
    sb.append(", minute: ").append(toIndentedString(minute));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Month");
    openapiFields.add("Day");
    openapiFields.add("Hour");
    openapiFields.add("Minute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Month");
    openapiRequiredFields.add("Day");
    openapiRequiredFields.add("Hour");
    openapiRequiredFields.add("Minute");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipStaticDataEta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ShipStaticDataEta.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipStaticDataEta is not found in the empty JSON string", ShipStaticDataEta.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShipStaticDataEta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipStaticDataEta` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShipStaticDataEta.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipStaticDataEta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipStaticDataEta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipStaticDataEta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipStaticDataEta.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipStaticDataEta>() {
           @Override
           public void write(JsonWriter out, ShipStaticDataEta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipStaticDataEta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

  public static ShipStaticDataEta fromJson(JSONObject jo) {
    ShipStaticDataEta res = new ShipStaticDataEta();
    // Extract individual fields from JSONObject
    try {
      res = res.month(jo.getInt(SERIALIZED_NAME_MONTH))
               .day(jo.getInt(SERIALIZED_NAME_DAY))
               .hour(jo.getInt(SERIALIZED_NAME_HOUR))
               .minute(jo.getInt(SERIALIZED_NAME_MINUTE));
    } catch (JSONException e) {
//        logger.error("Error creating ShipStaticDataEta", e);
      System.out.println("Error creating ShipStaticDataEta " + e);
    }
    return res;
  }

 /**
  * Create an instance of ShipStaticDataEta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipStaticDataEta
  * @throws IOException if the JSON string is invalid with respect to ShipStaticDataEta
  */
//  public static ShipStaticDataEta fromJson(String jsonString) throws IOException {
//    return JSON.getGson().fromJson(jsonString, ShipStaticDataEta.class);
//  }

 /**
  * Convert an instance of ShipStaticDataEta to an JSON string
  *
  * @return JSON string
  */
//  public String toJson() {
//    return JSON.getGson().toJson(this);
//  }
}

